services:
  db:
    image: postgres:14
    container_name: postgres_service
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my_network

  init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: init_service
    depends_on:
      - db
    volumes:
      - .:/shop_api
    working_dir: /shop_api
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    networks:
      - my_network
    command: ["python", "shop_api/init_db.py"]

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app_service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - .:/shop_api
    working_dir: /shop_api
    ports:
      - "80:80"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    depends_on:
      - db
      - init
    networks:
      - my_network
    command: ["poetry", "run", "uvicorn", "shop_api.main:app", "--host", "0.0.0.0", "--port", "80"]

networks:
  my_network:
    driver: bridge

volumes:
  db_data:
